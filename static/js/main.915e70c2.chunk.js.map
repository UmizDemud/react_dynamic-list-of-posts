{"version":3,"sources":["utils/fetchClient.ts","components/UsersContext.tsx","components/PostsContext.tsx","api/posts.ts","components/PostsList.tsx","components/CommentsContext.tsx","api/comments.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/users.ts","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","UsersContext","createContext","user","setUser","UsersProvider","children","useState","Provider","value","usr","PostsContext","currently","post","setPost","posts","setPosts","PostsProvider","setCurrently","useContext","useEffect","userId","id","result","length","catch","PostsList","className","map","eachPost","selected","title","type","onClick","CommentsContext","comments","setComments","CommentsProvider","requestCount","setRequestCount","getPosts","useCallback","postId","prev","Loader","NewCommentForm","name","setName","email","setEmail","setBody","loading","setLoading","missingName","missingEmail","missingBody","errors","setErrors","handleNameInput","newName","handleEmailInput","newEmail","handleBodyInput","newBody","htmlFor","placeholder","onChange","e","target","comment","preventDefault","res","newComment","finally","PostDetails","isNewComentOpen","setIsNewCommentOpen","deleteComment","filter","com","commentsService","href","split","line","i","getKey","UserSelector","users","setUsers","isOpen","setIsOpen","role","App","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.915e70c2.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import {\n  FC,\n  useState,\n  ReactNode,\n  createContext,\n} from 'react';\nimport { User } from '../types/User';\n\ntype ContextProps = {\n  user: User | null;\n  setUser: (usr: User | null) => void;\n};\n\nexport const UsersContext = createContext<ContextProps>({\n  user: null,\n  setUser: () => {},\n});\n\ntype Props = {\n  children: ReactNode;\n};\n\nexport const UsersProvider: FC<Props> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  return (\n    <UsersContext.Provider value={{\n      user,\n      setUser: (usr: User | null) => setUser(usr),\n    }}\n    >\n      {children}\n    </UsersContext.Provider>\n  );\n};\n","import {\n  FC,\n  useState,\n  useEffect,\n  ReactNode,\n  createContext,\n  useContext,\n} from 'react';\nimport * as postsService from '../api/posts';\nimport { Post } from '../types/Post';\nimport { UsersContext } from './UsersContext';\n\ntype Currently = 'noUser' | 'loading' | 'noPosts' | 'serverError' | 'active';\n\ntype ContextProps = {\n  currently: Currently,\n  post: Post | null;\n  setPost: React.Dispatch<React.SetStateAction<Post | null>>\n  posts: Post[];\n  setPosts: React.Dispatch<React.SetStateAction<Post[]>>\n};\n\nexport const PostsContext = createContext<ContextProps>({\n  currently: 'noUser',\n  post: null,\n  setPost: () => {},\n  posts: [],\n  setPosts: () => {},\n});\n\ntype Props = {\n  children: ReactNode;\n};\n\nexport const PostsProvider: FC<Props> = ({ children }) => {\n  const [post, setPost] = useState<Post | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [currently, setCurrently] = useState('noUser');\n  const { user } = useContext(UsersContext);\n\n  useEffect(() => {\n    setCurrently('loading');\n    if (user) {\n      postsService.getAllByUser(user.id)\n        .then(result => {\n          setPosts(result);\n          setCurrently(result.length ? 'active' : 'noPosts');\n        })\n        .catch(() => {\n          setCurrently('serverError');\n        });\n    } else {\n      setCurrently('noUser');\n    }\n  }, [user]);\n\n  return (\n    <PostsContext.Provider value={{\n      currently: currently as Currently,\n      post,\n      setPost,\n      posts,\n      setPosts,\n    }}\n    >\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport function getAllByUser(userId: number) {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n}\n","import { FC, useContext } from 'react';\nimport { PostsContext } from './PostsContext';\n\nexport const PostsList: FC = () => {\n  const { post, setPost, posts } = useContext(PostsContext);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(eachPost => {\n            const selected = eachPost.id === post?.id;\n\n            return (\n              <tr key={eachPost.id} data-cy=\"Post\">\n                <td data-cy=\"PostId\">{eachPost.id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {eachPost.title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={`button is-link${selected ? ' is-light' : ''}`}\n                    onClick={() => setPost(selected ? null : eachPost)}\n                  >\n                    {selected ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import {\n  FC,\n  useState,\n  useEffect,\n  ReactNode,\n  useContext,\n  createContext,\n  Dispatch,\n  SetStateAction,\n  useCallback,\n} from 'react';\nimport { Comment } from '../types/Comment';\nimport { PostsContext } from './PostsContext';\nimport * as commentsService from '../api/comments';\n\ntype Currently = 'noPost' | 'loading' | 'noComments' | 'serverError' | 'active';\n\ntype ContextProps = {\n  currently: Currently;\n  comments: Comment[];\n  setComments: Dispatch<SetStateAction<Comment[]>>;\n};\n\nexport const CommentsContext = createContext<ContextProps>({\n  currently: 'noPost',\n  comments: [],\n  setComments: () => {},\n});\n\ntype Props = {\n  children: ReactNode;\n};\n\nexport const CommentsProvider: FC<Props> = ({ children }) => {\n  const { post } = useContext(PostsContext);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [currently, setCurrently] = useState<Currently>('noPost');\n  const [requestCount, setRequestCount] = useState(0);\n\n  const getPosts = useCallback(\n    () => {\n      setCurrently('loading');\n      if (post) {\n        setRequestCount(prev => prev + 1);\n        commentsService.getAllByPost(post.id)\n          .then(result => {\n            setComments(result);\n            setCurrently(result.length ? 'active' : 'noComments');\n          })\n          .catch(() => {\n            setCurrently('serverError');\n          });\n      } else {\n        setCurrently('noPost');\n      }\n    },\n    [post],\n  );\n\n  useEffect(() => {\n    getPosts();\n  }, [post]);\n\n  useEffect(() => {\n    if (requestCount < 3) {\n      if (currently === 'serverError') {\n        setTimeout(() => {\n          setCurrently('loading');\n          getPosts();\n        }, 1000);\n      }\n    }\n  }, [requestCount]);\n\n  return (\n    <CommentsContext.Provider value={{\n      currently: currently as Currently,\n      comments,\n      setComments,\n    }}\n    >\n      {children}\n    </CommentsContext.Provider>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport function getAllByPost(postId: number) {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n}\n\nexport function post(comment: Partial<Comment>) {\n  return client.post<Comment>('/comments', comment);\n}\n\nexport function remove(id: number) {\n  return client.delete(`/comments/${id}`);\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useCallback, useContext, useState } from 'react';\nimport * as commentsService from '../api/comments';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { CommentsContext } from './CommentsContext';\n\ntype Props = {\n  post: Post;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ post }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({\n    missingName: false,\n    missingEmail: false,\n    missingBody: false,\n  });\n  const { setComments } = useContext(CommentsContext);\n\n  const postComment = (e: React.FormEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n\n    setErrors({\n      missingName: !name,\n      missingEmail: !email,\n      missingBody: !body,\n    });\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    setLoading(true);\n    commentsService.post({\n      postId: post.id,\n      name,\n      email,\n      body,\n    })\n      .then((res) => {\n        const newComment = {\n          id: res.id,\n          postId: post.id,\n          name,\n          email,\n          body,\n        } as Comment;\n\n        setComments(prev => [...prev, newComment]);\n      })\n      .finally(() => setLoading(false));\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const resetComment = () => {\n    setBody('');\n    setErrors({\n      missingName: false,\n      missingEmail: false,\n      missingBody: false,\n    });\n    setLoading(false);\n  };\n\n  const handleNameInput = useCallback((newName: string) => {\n    if (errors.missingName) {\n      setErrors(prev => ({\n        ...prev,\n        missingName: !newName.length,\n      }));\n    }\n\n    setName(newName);\n  }, [setName, errors.missingName]);\n\n  const handleEmailInput = useCallback((newEmail: string) => {\n    if (errors.missingEmail) {\n      setErrors(prev => ({\n        ...prev,\n        missingEmail: !newEmail.length,\n      }));\n    }\n\n    setEmail(newEmail);\n  }, [setEmail, errors.missingEmail]);\n\n  const handleBodyInput = useCallback((newBody: string) => {\n    if (errors.missingBody) {\n      setErrors(prev => ({\n        ...prev,\n        missingBody: !newBody.length,\n      }));\n    }\n\n    setBody(newBody);\n  }, [setBody, errors.missingBody]);\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={`input${errors.missingName ? ' is-danger' : ''}`}\n            value={name}\n            onChange={e => handleNameInput(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.missingName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.missingName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={`input${errors.missingEmail ? ' is-danger' : ''}`}\n            value={email}\n            onChange={e => handleEmailInput(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.missingEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.missingEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={`textarea${errors.missingBody ? ' is-danger' : ''}`}\n            value={body}\n            onChange={(e) => handleBodyInput(e.target.value)}\n          />\n        </div>\n\n        {errors.missingBody && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={`button is-link${loading ? ' is-loading' : ''}`}\n            onClick={postComment}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={resetComment}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport * as commentsService from '../api/comments';\nimport { Post } from '../types/Post';\nimport { CommentsContext } from './CommentsContext';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { PostsContext } from './PostsContext';\n\nexport const PostDetails: React.FC = () => {\n  const { post } = useContext(PostsContext);\n  const { comments, setComments, currently } = useContext(CommentsContext);\n  const [isNewComentOpen, setIsNewCommentOpen] = useState(false);\n  const getKey = (i: number, type: string) => `${type}${i}`;\n\n  const deleteComment = (id: number) => {\n    setComments(prev => prev.filter(com => com.id !== id));\n    commentsService.remove(id);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            { post?.body }\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {currently === 'loading' && <Loader />}\n\n          {currently === 'serverError' && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {currently === 'noComments' && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {currently === 'active' && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => deleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body.split('\\n').map((line, i) => (\n                      <p key={getKey(i, 'line')}>{line}</p>\n                    ))}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!isNewComentOpen && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsNewCommentOpen(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n        {isNewComentOpen && <NewCommentForm post={post as Post} />}\n      </div>\n    </div>\n  );\n};\n","import {\n  FC,\n  useState,\n  useEffect,\n  useContext,\n} from 'react';\nimport * as usersService from '../api/users';\nimport { User } from '../types/User';\nimport { UsersContext } from './UsersContext';\n\nexport const UserSelector: FC = () => {\n  const { user, setUser } = useContext(UsersContext);\n  const [users, setUsers] = useState<User[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    usersService.getAll()\n      .then((res => setUsers(res)));\n  }, [setUsers]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsOpen(prev => !prev)}\n        >\n          <span>{user ? user.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(usr => (\n              <a\n                key={usr.id}\n                href={`#${usr.id}`}\n                className=\"dropdown-item\"\n                onClick={() => {\n                  setUser(usr);\n                  setIsOpen(false);\n                }}\n              >\n                {usr.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport function getAll() {\n  return client.get<User[]>('/users');\n}\n","import { FC, useContext } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { PostsContext } from './components/PostsContext';\nimport { CommentsProvider } from './components/CommentsContext';\n\nexport const App: FC = () => {\n  const { currently, post } = useContext(PostsContext);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                { currently === 'noUser' && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                { currently === 'loading' && (\n                  <Loader />\n                )}\n\n                { currently === 'serverError' && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                { currently === 'noPosts' && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {currently === 'active' && (\n                  <PostsList />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': !!post },\n            )}\n          >\n            {currently === 'active' && post && (\n              <div className=\"tile is-child box is-success \">\n                <CommentsProvider>\n                  <PostDetails />\n                </CommentsProvider>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { PostsProvider } from './components/PostsContext';\nimport { UsersProvider } from './components/UsersContext';\n\nReactDOM.render(\n  <UsersProvider>\n    <PostsProvider>\n      <App />\n    </PostsProvider>\n  </UsersProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}